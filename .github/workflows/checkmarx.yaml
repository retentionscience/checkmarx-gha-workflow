name: Run Checkmarx

on:
  workflow_call:
    inputs:
      project:
        required: false
        type: string
        default: ${{ github.repository }}-PR
      checkmarx_url:
        required: false
        type: string
        default: https://ctct.checkmarx.net
      incremental:
        required: false
        type: string
        default: false
      scanners:
        required: false
        type: string
        default: sast, sca
      break_build:
        required: false
        type: string
        default: true
      bug_tracker:
        required: false
        type: string
        default: GITHUBPULL
      filter_params:
        required: false
        type: string
        default: --cx-flow.filterSeverity --cx-flow.filterCategory --cx-flow.thresholds.high=0 --cx-flow.thresholds.medium=0 --cx-flow.thresholds.low=0 --sca.thresholds-score=11 --cx-flow.zip-exclude='\.git\/.*,\.github\/.*'
      localsca:
        required: false
        type: boolean
        default: true
      params:
        required: false
        type: string
      node_version:
        required: false
        type: string
        default: 18
      scala_java_version:
        required: false
        type: string
        default: adopt@1.8
      sca_params:
        required: false
        type: string
      sca_log_level:
        required: false
        type: string
        default: Debug
      sca_scan_path:
        required: false
        type: string


jobs:
  checkmarx:
    name: Checkmarx
    runs-on: [self-hosted]
    concurrency:
      group: checkmarx
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.pull_request.head.sha }}

      - name: Verify and configure environment
        id: setup_env
        run: |
          if [ "${{ vars.CHECKMARX_TEAM }}" == '' ]; then echo "Error: CHECKMARX_TEAM was not set"; exit 1; fi
          echo "${{ vars.CHECKMARX_TEAM }}"
          projname=$(echo ${{ inputs.project }} | tr / -); echo "projname=$projname" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.params }}" =~ "include-sources=true" ]];then
            echo "Using checkmarx's github token"
            echo "github_token=${{ secrets.CHECKMARX_GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
          else
            echo "Using default github token"
            echo "github_token=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.localsca }}" == "true" ]];then
            echo "localsca==true, so force scanners=sast"
            echo "scanners=sast" >> $GITHUB_OUTPUT
          else
            echo "localsca==false, so pass through scanners"
            echo "scanners=${{ inputs.scanners }}" >> $GITHUB_OUTPUT
          fi

      - name: Remove unneeded files
        run: |
          rm -rf db spec script/data_migrations ./public/images/seconds_animated_60.gif test tests
          find . -name __tests__ -o -name __mocks__ -print0 | xargs -0 rm -rf

      - name: Checkmarx CxFlow Action
        uses: checkmarx-ts/checkmarx-cxflow-github-action@HEAD
        with:
          team: ${{ vars.CHECKMARX_TEAM }}
          project: ${{ inputs.project }}
          checkmarx_url: ${{ inputs.checkmarx_url }}
          checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }}
          checkmarx_password: ${{ secrets.CHECKMARX_PASSWORD }}
          checkmarx_username: ${{ vars.CHECKMARX_USERNAME }}
          sca_password: ${{ secrets.CHECKMARX_SCA_PASSWORD }}
          sca_username: ${{ vars.CHECKMARX_SCA_USERNAME }}
          sca_tenant: ${{ vars.CHECKMARX_SCA_TENANT }}
          incremental: ${{ inputs.incremental }}
          scanners: ${{ steps.setup_env.outputs.scanners }}
          break_build: ${{ inputs.break_build }}
          bug_tracker: ${{ inputs.bug_tracker }}
          github_token: ${{ steps.setup_env.outputs.github_token }}
          params: --sca.team=${{ vars.CHECKMARX_TEAM }} --namespace=${{ github.repository_owner }}  --repo-name=${{ github.event.repository.name }} --branch=${{ github.head_ref }} --merge-id=${{ github.event.number }} ${{ inputs.filter_params }} ${{ inputs.params }}
          java_opts: -Xmx4g

  sca:
    name: Checkmarx SCA local
    if: ${{ inputs.localsca }}
    runs-on: [self-hosted]
    concurrency:
      group: sca
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.pull_request.head.sha }}

      - name: Verify and configure environment
        id: setup_env
        run: |
          if [ "${{ vars.CHECKMARX_TEAM }}" == '' ]; then echo "Error: CHECKMARX_TEAM was not set"; exit 1; fi
          echo "${{ vars.CHECKMARX_TEAM }}"
          projname=$(echo ${{ inputs.project }} | tr / -); echo "projname=$projname" >> $GITHUB_OUTPUT

          build_sbt=false
          test -f build.sbt && build_sbt=true
          echo "build_sbt=$build_sbt" >> $GITHUB_OUTPUT

          build_python=false
          for a in Pipfile pyproject.toml */Pipfile */pyproject.toml;do test -f $a && build_python=true;done
          build_python_version=3.8
          if test -f .python-version;then build_python_version=$(cat .python-version);fi
          echo "build_python=$build_python" >> $GITHUB_OUTPUT
          echo "build_python_version=$build_python_version" >> $GITHUB_OUTPUT
          if [[ -f Pipfile.lock && ! -f requirements.txt ]];then jq -r '.default | to_entries[] | .key + .value.version' Pipfile.lock > requirements.txt;fi
          python3 -m pip install virtualenv # virtualenv for system python, and possibly again for the app's pyenv-managed python

          build_poetry=false
          build_poetry_path=none
          for a in pyproject.toml */pyproject.toml ;do test -f $a && grep tool.poetry $a && build_poetry=true && build_poetry_path=$(dirname $a);done
          echo "build_poetry=$build_poetry" >> $GITHUB_OUTPUT
          echo "build_poetry_path=$build_poetry_path" >> $GITHUB_OUTPUT

          build_go=false
          for a in $(find . -name go.mod);do  build_go=true; build_go_version=$(grep '^go ' $a| awk '{print $NF}');done
          echo "build_go=$build_go" >> $GITHUB_OUTPUT
          echo "build_go_version=$build_go_version" >> $GITHUB_OUTPUT

          build_npm=false
          build_node_version=${{ inputs.node_version }}
          test -f .nvmrc && build_node_version=$(cat .nvmrc)
          test -f package.json && build_npm=true
          echo "build_npm=$build_npm" >> $GITHUB_OUTPUT
          echo "build_node_version=$build_node_version" >> $GITHUB_OUTPUT

          echo "Detected: build_python=$build_python build_poetry=$build_poetry build_poetry_path=$build_poetry_path build_sbt=$build_sbt build_go=$build_go"
          echo "Environment complete."

      - name: Remove unneeded files
        run: |
          rm -rf db spec script/data_migrations ./public/images/seconds_animated_60.gif test tests
          find . -name __tests__ -o -name __mocks__ -print0 | xargs -0 rm -rf

      - name: Setup Scala
        if: steps.setup_env.outputs.build_sbt == 'true'
        uses: retentionscience/setup-scala@v14
        with:
          java-version: ${{ inputs.scala_java_version }}

      - name: Build SBT
        if: steps.setup_env.outputs.build_sbt == 'true'
        run: sbt compile

      - name: Setup Pyenv
        if: steps.setup_env.outputs.build_python == 'true'
        id: setup-pyenv
        uses: retentionscience/pyenv-action@v14
        with:
          default: ${{ steps.setup_env.outputs.build_python_version }}
          command: python3 -m pip install virtualenv

      - name: Install poetry
        if: steps.setup_env.outputs.build_poetry == 'true'
        id: setup-poetry
        run: |
         for a in $(find . -name pyproject.toml) ;do test -f $a && grep tool.poetry $a && make -C $(dirname $a) compile;done

      - name: Install Golang
        if: steps.setup_env.outputs.build_go == 'true'
        id: setup-go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.setup_env.outputs.build_go_version }}

      - name: Install Node
        if: steps.setup_env.outputs.build_npm == 'true'
        id: setup-node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.setup_env.outputs.build_node_version }}

      - name: Test package CI lock
        if: steps.setup_env.outputs.build_npm == 'true'
        id: test-npm
        run: |
          npm config set python `which python3` || :  # This can fail for some versions of npm, maybe we don't care.
          if test -f yarn.lock;then
              npm -g install yarn
              yarn install --immutable
          else
              npm ci
          fi

      - name: SCA Resolver
        id: scaresolver
        run: |
            set -x
            mkdir ${{ github.workspace }}/SCAResolver
            wget --quiet "https://sca-downloads.s3.amazonaws.com/cli/latest/ScaResolver-linux64.tar.gz"
            tar -xvf ScaResolver-linux64.tar.gz -C ${{ github.workspace }}/SCAResolver
            python --version || :
            python3 --version || :
            which python || :
            which python3 || :
            pyenv local || :
            export PYTHONPATH=`which python3`
            ${{ github.workspace }}/SCAResolver/ScaResolver -s '${{ inputs.sca_scan_path != '' && inputs.sca_scan_path || github.workspace }}' -n '${{ steps.setup_env.outputs.projname }}' -a '${{ vars.CHECKMARX_SCA_TENANT }}' -u '${{ vars.CHECKMARX_SCA_USERNAME }}' -p '${{ secrets.CHECKMARX_SCA_PASSWORD }}' -t '${{ vars.CHECKMARX_TEAM }}' --log-level '${{ inputs.sca_log_level }}' ${{ inputs.sca_params }} 2>&1 | tee scaresolver.log
            scanid=$(grep 'Program "Scan Id: ' scaresolver.log | sed -e 's/.*Program "Scan Id: //' -e 's/"//')
            if [ -z "scanid" ];then
               msg="Error: Failed to parse scanid from scaresolver.log"
               echo "$msg"
               echo "sca-scan-summary=$msg" >> $GITHUB_OUTPUT
               exit 1
            fi
            echo "sca-scan-id=$scanid"
            echo "sca-scan-id=$scanid" >> $GITHUB_OUTPUT

            comment=$(cat scaresolver.log | sed -n '/### Scan Summary ###/,/^Full report available at/p' | grep -v '####')
            if [ -z "$comment" ];then
               comment="***SCA Resolver has probably failed.***"
            fi
            echo 'sca-scan-summary<<EOF' >> $GITHUB_OUTPUT
            echo "$comment" >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
            exit_code=${PIPESTATUS[0]}
            exit $exit_code

      - name: Fetch SCA Resolver scan warnings
        id: scaresolver-warnings
        run: |
          scanid=${{ steps.scaresolver.outputs.sca-scan-id }}
          access_token=$(curl -s 'https://platform.checkmarx.net/identity/connect/token' \
              --data-urlencode "username=${{ vars.CHECKMARX_SCA_USERNAME }}" \
              --data-urlencode "password=${{ secrets.CHECKMARX_SCA_PASSWORD }}" \
              --data-urlencode "acr_values=Tenant:${{ vars.CHECKMARX_SCA_TENANT }}" \
              --data-urlencode "scope=sca_api" \
              --data-urlencode "client_id=sca_resource_owner" \
              --data-urlencode "grant_type=password" | jq -r '.access_token')

          if [ -z "$access_token" ];then
            echo "Failed to fetch access token"
            exit 1
          fi
          comment=$(curl -s -H "Authorization: bearer $access_token" "https://api-sca.checkmarx.net/risk-management/riskReports/$scanid/warnings" | jq .[])
          echo "$comment"
          echo 'sca-scan-warnings<<EOF' >> $GITHUB_OUTPUT
          echo "$comment" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: PR Decoration
        if: always()
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ![Logo](https://user-images.githubusercontent.com/23239410/92153465-ff743900-ee2c-11ea-9c8d-8141e38feb41.png)
            **Checkmarx SCA - Scan Summary**
            ${{ steps.scaresolver.outputs.sca-scan-summary }}
            ```json
            ${{ steps.scaresolver-warnings.outputs.sca-scan-warnings }}
            ```
          comment_tag: sca_resolver_decoration
