name: Run Checkmarx

on:
  workflow_call:
    inputs:
      project:
        required: false
        type: string
        default: ${{ github.repository }}-PR
      checkmarx_url:
        required: false
        type: string
        default: https://ctct.checkmarx.net
      incremental:
        required: false
        type: string
        default: false
      scanners:
        required: false
        type: string
        default: sast, sca
      break_build:
        required: false
        type: string
        default: true
      bug_tracker:
        required: false
        type: string
        default: GITHUBPULL
      filter_params:
        required: false
        type: string
        default: --cx-flow.filterSeverity --cx-flow.filterCategory --cx-flow.thresholds.high=0 --cx-flow.thresholds.medium=0 --cx-flow.thresholds.low=0 --sca.thresholds-score=11
      localsca:
        required: false
        type: boolean
        default: false
      params:
        required: false
        type: string
      scala_java_version:
        required: false
        type: string
        default: adopt@1.8
      sca_params:
        required: false
        type: string
      sca_log_level:
        required: false
        type: string
        default: Verbose
      sca_scan_path:
        required: false
        type: string
        default: ${{ github.workspace }}


jobs:
  checkmarx:
    name: Checkmarx
    runs-on: [self-hosted]
    concurrency:
      group: checkmarx
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.pull_request.head.sha }}

      - name: Verify and configure environment
        id: setup_env
        run: |
          if [ "${{ vars.CHECKMARX_TEAM }}" == '' ]; then echo "Error: CHECKMARX_TEAM was not set"; exit 1; fi
          echo "${{ vars.CHECKMARX_TEAM }}"
          projname=$(echo ${{ inputs.project }} | tr / -); echo "projname=$projname" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.params }}" =~ "include-sources=true" ]];then
            echo "Using checkmarx's github token"
            echo "github_token=${{ secrets.CHECKMARX_GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
          else
            echo "Using default github token"
            echo "github_token=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.localsca }}" == "true" ]];then
            echo "localsca==true, so force scanners=sast"
            echo "scanners=sast" >> $GITHUB_OUTPUT
          else
            echo "localsca==false, so pass through scanners"
            echo "scanners=${{ inputs.scanners }}" >> $GITHUB_OUTPUT
          fi

      - name: Remove unneeded files
        run: |
          rm -rf db spec script/data_migrations ./public/images/seconds_animated_60.gif test tests
          find . -name __tests__ -o -name __mocks__ -print0 | xargs -0 rm -rf

      - name: Checkmarx CxFlow Action
        uses: checkmarx-ts/checkmarx-cxflow-github-action@HEAD
        with:
          team: ${{ vars.CHECKMARX_TEAM }}
          project: ${{ inputs.project }}
          checkmarx_url: ${{ inputs.checkmarx_url }}
          checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }}
          checkmarx_password: ${{ secrets.CHECKMARX_PASSWORD }}
          checkmarx_username: ${{ vars.CHECKMARX_USERNAME }}
          sca_password: ${{ secrets.CHECKMARX_SCA_PASSWORD }}
          sca_username: ${{ vars.CHECKMARX_SCA_USERNAME }}
          sca_tenant: ${{ vars.CHECKMARX_SCA_TENANT }}
          incremental: ${{ inputs.incremental }}
          scanners: ${{ steps.setup_env.outputs.scanners }}
          break_build: ${{ inputs.break_build }}
          bug_tracker: ${{ inputs.bug_tracker }}
          github_token: ${{ steps.setup_env.outputs.github_token }}
          params: --sca.team=${{ vars.CHECKMARX_TEAM }} --namespace=${{ github.repository_owner }}  --repo-name=${{ github.event.repository.name }} --branch=${{ github.head_ref }} --merge-id=${{ github.event.number }} ${{ inputs.filter_params }} ${{ inputs.params }}
          java_opts: -Xmx4g

  sca:
    name: Checkmarx SCA local
    if: ${{ inputs.localsca }}
    runs-on: [self-hosted]
    concurrency:
      group: sca
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.pull_request.head.sha }}

      - name: Verify and configure environment
        id: setup_env
        run: |
          if [ "${{ vars.CHECKMARX_TEAM }}" == '' ]; then echo "Error: CHECKMARX_TEAM was not set"; exit 1; fi
          echo "${{ vars.CHECKMARX_TEAM }}"
          projname=$(echo ${{ inputs.project }} | tr / -); echo "projname=$projname" >> $GITHUB_OUTPUT
          test -f build.sbt && echo "build_sbt=true" >> $GITHUB_OUTPUT
          build_python=false
          for a in Pipfile pyproject.toml */Pipfile */pyproject.toml;do test -f $a && build_python=true;done
          echo "build_python=$build_python" >> $GITHUB_OUTPUT
          build_poetry=false
          build_poetry_path=none
          for a in pyproject.toml */pyproject.toml ;do test -f $a && grep tool.poetry $a && build_poetry=true && build_poetry_path=$(dirname $a);done
          echo "build_poetry=$build_poetry" >> $GITHUB_OUTPUT
          echo "build_poetry_path=$build_poetry_path" >> $GITHUB_OUTPUT
          if test -f Pipfile.lock;then jq -r '.default | to_entries[] | .key + .value.version' Pipfile.lock > requirements.txt;fi
          python3 -m pip install virtualenv
          echo "Detected: build_python=$build_python build_poetry=$build_poetry build_poetry_path=$build_poetry_path build_sbt=true"
          echo "Environment complete."

      - name: Remove unneeded files
        run: |
          rm -rf db spec script/data_migrations ./public/images/seconds_animated_60.gif test tests
          find . -name __tests__ -o -name __mocks__ -print0 | xargs -0 rm -rf

      - name: Setup Scala
        if: steps.setup_env.outputs.build_sbt
        uses: retentionscience/setup-scala@v14
        with:
          java-version: ${{ inputs.scala_java_version }}

      - name: Setup Pyenv
        if: steps.setup_env.outputs.build_python
        id: setup-pyenv
        uses: retentionscience/pyenv-action@v14

      - name: Install poetry
        if: steps.setup_env.outputs.build_poetry
        id: setup-poetry
        run: make -C grafana compile

      - name: SCA Resolver
        id: scaresolver
        run: |
            mkdir ${{ github.workspace }}/SCAResolver
            wget --quiet "https://sca-downloads.s3.amazonaws.com/cli/latest/ScaResolver-linux64.tar.gz"
            tar -xvf ScaResolver-linux64.tar.gz -C ${{ github.workspace }}/SCAResolver
            ${{ github.workspace }}/SCAResolver/ScaResolver -s '${{ inputs.sca_scan_path }}' -n '${{ steps.setup_env.outputs.projname }}' -a '${{ vars.CHECKMARX_SCA_TENANT }}' -u '${{ vars.CHECKMARX_SCA_USERNAME }}' -p '${{ secrets.CHECKMARX_SCA_PASSWORD }}' -t '${{ vars.CHECKMARX_TEAM }}' --log-level '${{ inputs.sca_log_level }}' ${{ inputs.sca_params }} 2>&1 | tee scaresolver.log
            comment=$(cat scaresolver.log | sed -n '/### Scan Summary ###/,/^Full report available at/p' | grep -v '####')
            if [ -z "$comment" ];then
               comment="***SCA Resolver has probably failed.***"
            fi
            echo 'sca-scan-summary<<EOF' >> $GITHUB_OUTPUT
            echo "$comment" >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
            exit_code=${PIPESTATUS[0]}
            exit $exit_code

      - name: PR Decoration
        if: always()
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ![Logo](https://user-images.githubusercontent.com/23239410/92153465-ff743900-ee2c-11ea-9c8d-8141e38feb41.png)
            **Checkmarx SCA - Scan Summary**
            ${{ steps.scaresolver.outputs.sca-scan-summary }}
          comment_tag: sca_resolver_decoration
